{"version":3,"file":"tofuswap-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/fractions/percent.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 11111,\n  NILE = 201910292,\n  SHASTA = 1\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n// mainnet\nexport const FACTORY_ADDRESS = '0x227044d0cd57e257b15c8c3bd5608e241b8b02ca'\n\nexport const TOFU_FREEZER_ADDRESS = '0x4B51442c89d2A87480F29A5470FDc3f9619869E1'\n\n// local tests\n//export const INIT_CODE_HASH = '0x67362b6851b5759acb891575dad6796f51c77306b174ae6c6fd05882d9bd1bf3'\n//mainnet\nexport const INIT_CODE_HASH = '0xf18ab5ba2b2ea93d5f80bbf9f1f4b2ccc8ad443571e6a3af023346a5dd669249'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _9970 = JSBI.BigInt(9970)\nexport const _9975 = JSBI.BigInt(9975)\nexport const _9980 = JSBI.BigInt(9980)\nexport const _9985 = JSBI.BigInt(9985)\nexport const _9990 = JSBI.BigInt(9990)\nexport const _10000 = JSBI.BigInt(10000)\nexport const _100000000 = JSBI.BigInt(100000000)\nexport const _1000000000 = JSBI.BigInt(1000000000)\nexport const _10000000000 = JSBI.BigInt(10000000000)\nexport const _100000000000 = JSBI.BigInt(100000000000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  // @TRON\n  // public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly TRX: Currency = new Currency(6, 'TRX', 'Tron')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst TRX = Currency.TRX\nexport { TRX }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// TODO: TRON: deploy WTRX and set contract addresses here\nexport const WTRX: { [chainId in ChainId]: Token } = {\n  // TODO: TRON: deploy WTRX on mainnet\n  [ChainId.MAINNET]: new Token(\n    // Deployed by Tron Foundation\n    // https://tronscan.io/#/token20/TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR/code\n    ChainId.MAINNET,\n    '0x891cdb91d149f23b1a45d9c5ca78a88d0cb44c18',\n    6,\n    'WTRX',\n    'Wrapped TRX'\n  ),\n  [ChainId.NILE]: new Token(ChainId.NILE, '0x6659eaba214be518345a157bd7e1aee20fa64e3d', 6, 'WTRX', 'Wrapped Tron'),\n  [ChainId.SHASTA]: new Token(ChainId.SHASTA, '0xb440ae27ef6b066a1fd2d1bb9c2bb6e61b3373e5', 6, 'WTRX', 'Wrapped Tron')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, TRX } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the TRX currency\n   * @param amount ether amount in wei\n   */\n  public static trx(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(TRX, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.trx(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Percent } from './fractions/percent'\nimport { TOFU_FREEZER_ADDRESS } from '../constants'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _9970,\n  _9975,\n  _9980,\n  _9985,\n  _9990,\n  _10000,\n  _100000000,\n  _1000000000,\n  _10000000000,\n  _100000000000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'TOFU-V2',\n      'Tofuswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, tofuFreezedAmount?: TokenAmount | undefined ): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    // need update\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, this.getFeeCoefficient(tofuFreezedAmount))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, tofuFreezedAmount?: TokenAmount | undefined): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), this.getFeeCoefficient(tofuFreezedAmount))\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n\n  private getFeeCoefficient(tofuFreezedAmount?: TokenAmount | undefined){\n    if (tofuFreezedAmount === undefined) {\n      return _9970\n    }\n\n    // should be checksumed address\n    invariant(tofuFreezedAmount.token.address === TOFU_FREEZER_ADDRESS, 'TOFU_FREEZER_ADDRESS')\n\n    if ( JSBI.greaterThanOrEqual(tofuFreezedAmount.numerator, _100000000000)) {\n      return _9990\n    }\n    if ( JSBI.greaterThanOrEqual(tofuFreezedAmount.numerator, _10000000000)) {\n      return _9985\n    }\n    if ( JSBI.greaterThanOrEqual(tofuFreezedAmount.numerator, _1000000000)) {\n      return _9980\n    }\n    if ( JSBI.greaterThanOrEqual(tofuFreezedAmount.numerator, _100000000)) {\n      return _9975\n    }\n    return _9970\n  }\n\n  public getFeePercent(tofuFreezedAmount?: TokenAmount | undefined){\n    return new Percent(this.getFeeCoefficient(tofuFreezedAmount), _10000)\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, TRX } from './currency'\nimport { Token, WTRX } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === TRX && pairs[0].involvesToken(WTRX[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === TRX && pairs[pairs.length - 1].involvesToken(WTRX[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WTRX[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, TRX } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WTRX } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is TRX, returns the WTRX token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === TRX) return new TokenAmount(WTRX[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === TRX) return WTRX[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The amount of freezed TOFU to calculate actual fee.\n   */\n  public readonly tofuFreezed: TokenAmount | undefined\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, tofuFreezedAmount?: TokenAmount | undefined) {\n    this.tofuFreezed = tofuFreezedAmount\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], this.tofuFreezed)\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], this.tofuFreezed)\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === TRX\n        ? CurrencyAmount.trx(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === TRX\n        ? CurrencyAmount.trx(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.trx(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.trx(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    tofuFreezedAmount?: TokenAmount | undefined,\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn, tofuFreezedAmount)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT,\n            tofuFreezedAmount\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          tofuFreezedAmount,\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    tofuFreezedAmount?: TokenAmount | undefined,\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut, tofuFreezedAmount)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n            tofuFreezedAmount\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          tofuFreezedAmount,\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, TRX, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === TRX\n    const etherOut = trade.outputAmount.currency === TRX\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'TRX_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactTRXForTokensSupportingFeeOnTransferTokens' : 'swapExactTRXForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTRXSupportingFeeOnTransferTokens' : 'swapExactTokensForTRX'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapTRXForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactTRX'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ITofuswapV2Pair from './IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    // @TRON\n    // '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    // TODO(tron): use java-tron-provider...\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, ITofuswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","TOFU_FREEZER_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_9970","_9975","_9980","_9985","_9990","_10000","_100000000","_1000000000","_10000000000","_100000000000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","TRX","Token","chainId","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WTRX","MAINNET","NILE","SHASTA","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","trx","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","_100_PERCENT","Percent","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","tofuFreezedAmount","inputReserve","outputReserve","inputAmountWithFee","getFeeCoefficient","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","getFeePercent","Route","input","output","every","currentInput","midPrice","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","tofuFreezed","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","ITofuswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":";;;;;;;;;;;;;;IAKYA;;AAAZ,WAAYA;EACVA,mCAAA,YAAA;EACAA,oCAAA,SAAA;EACAA,8BAAA,WAAA;AACD,CAJD,EAAYA,OAAO,KAAPA,OAAO,KAAA,CAAnB;;IAMYC;;AAAZ,WAAYA;EACVA,uCAAA,gBAAA;EACAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,SAAS,KAATA,SAAS,KAAA,CAArB;;IAKYC;;AAAZ,WAAYA;EACVA,oCAAA,eAAA;EACAA,uCAAA,kBAAA;EACAA,kCAAA,aAAA;AACD,CAJD,EAAYA,QAAQ,KAARA,QAAQ,KAAA,CAApB;;;IAOaC,eAAe,GAAG;IAElBC,oBAAoB,GAAG;AAGpC;AACA;;IACaC,cAAc,GAAG;IAEjBC,iBAAiB,gBAAGC,IAAI,CAACC,MAAL,CAAY,IAAZ;;AAG1B,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMG,GAAG,gBAAGJ,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMI,KAAK,gBAAGL,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAd;AACA,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAMM,GAAG,gBAAGP,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAZ;AACA,IAAMO,IAAI,gBAAGR,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMQ,KAAK,gBAAGT,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AACA,IAAMS,KAAK,gBAAGV,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AACA,IAAMU,KAAK,gBAAGX,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AACA,IAAMW,KAAK,gBAAGZ,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AACA,IAAMY,KAAK,gBAAGb,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AACA,IAAMa,MAAM,gBAAGd,IAAI,CAACC,MAAL,CAAY,KAAZ,CAAf;AACA,IAAMc,UAAU,gBAAGf,IAAI,CAACC,MAAL,CAAY,SAAZ,CAAnB;AACA,IAAMe,WAAW,gBAAGhB,IAAI,CAACC,MAAL,CAAY,UAAZ,CAApB;AACA,IAAMgB,YAAY,gBAAGjB,IAAI,CAACC,MAAL,CAAY,WAAZ,CAArB;AACA,IAAMiB,aAAa,gBAAGlB,IAAI,CAACC,MAAL,CAAY,YAAZ,CAAtB;AAEP,IAAYkB,YAAZ;;AAAA,WAAYA;EACVA,qBAAA,UAAA;EACAA,uBAAA,YAAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;;AAKO,IAAMC,oBAAoB,sDAC9BD,YAAY,CAACE,KADiB,iBACTrB,IAAI,CAACC,MAAL,CAAY,MAAZ,CADS,wBAE9BkB,YAAY,CAACG,OAFiB,iBAEPtB,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAFO,wBAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DP;AACA,IAAMsB,iBAAiB,IAAG,oBAAoBC,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAaC,yBAAb;EAAA;;EAGE;;;IACE;IAHc,iCAAA,GAAoC,IAApC;IAId,MAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;IACA,IAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,gCAA4B,wEAAWC,SAAvC;;;;EAN3B;AAAA,iCAA+CC,KAA/C;AAUA;;;;;AAIA,IAAaC,4BAAb;EAAA;;EAGE;;;IACE;IAHc,qCAAA,GAAuC,IAAvC;IAId,OAAKL,IAAL,GAAY,OAAKC,WAAL,CAAiBD,IAA7B;IACA,IAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,iCAA4B,2EAAWC,SAAvC;;;;EAN3B;AAAA,iCAAkDC,KAAlD;;SCdgBE,6BAA6BC,OAAaC;EACxD,CAAUlC,IAAI,CAACmC,kBAAL,CAAwBF,KAAxB,EAA+B/B,IAA/B,CAAV,2CAAAkC,SAAS,QAA0CH,KAA1C,kBAA4DC,YAA5D,OAAT,GAAAE,SAAS,OAAT;EACA,CAAUpC,IAAI,CAACqC,eAAL,CAAqBJ,KAArB,EAA4Bb,oBAAoB,CAACc,YAAD,CAAhD,CAAV,2CAAAE,SAAS,QAAqEH,KAArE,kBAAuFC,YAAvF,OAAT,GAAAE,SAAS,OAAT;AACD;;AAGD,SAAgBE,wBAAwBC;EACtC,IAAI;IACF,IAAMC,kBAAkB,GAAGC,UAAU,CAACF,OAAD,CAArC;IACA,wCAAAG,OAAO,CAACH,OAAO,KAAKC,kBAAb,EAAoCD,OAApC,0BAAP;IACA,OAAOC,kBAAP;GAHF,CAIE,OAAOG,KAAP,EAAc;IACd,yCAAAP,SAAS,QAAWG,OAAX,8BAAT,GAAAH,SAAS,OAAT;;AAEH;AAED,SAAgBQ,eAAeC;EAC7B,OAAOA,SAAS,YAAY7C,IAArB,GACH6C,SADG,GAEH,OAAOA,SAAP,KAAqB,QAArB,GACA7C,IAAI,CAACC,MAAL,CAAY4C,SAAS,CAACC,QAAV,EAAZ,CADA,GAEA9C,IAAI,CAACC,MAAL,CAAY4C,SAAZ,CAJJ;AAKD;;AAGD,SAAgBE,KAAKC;EACnBhB,4BAA4B,CAACgB,CAAD,EAAI7B,YAAY,CAACG,OAAjB,CAA5B;EACA,IAAI2B,CAAC,GAAS/C,IAAd;EACA,IAAIgD,CAAJ;;EACA,IAAIlD,IAAI,CAACmD,WAAL,CAAiBH,CAAjB,EAAoB3C,KAApB,CAAJ,EAAgC;IAC9B4C,CAAC,GAAGD,CAAJ;IACAE,CAAC,GAAGlD,IAAI,CAACoD,GAAL,CAASpD,IAAI,CAACqD,MAAL,CAAYL,CAAZ,EAAe5C,GAAf,CAAT,EAA8BD,GAA9B,CAAJ;;IACA,OAAOH,IAAI,CAACsD,QAAL,CAAcJ,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;MAC1BA,CAAC,GAAGC,CAAJ;MACAA,CAAC,GAAGlD,IAAI,CAACqD,MAAL,CAAYrD,IAAI,CAACoD,GAAL,CAASpD,IAAI,CAACqD,MAAL,CAAYL,CAAZ,EAAeE,CAAf,CAAT,EAA4BA,CAA5B,CAAZ,EAA4C9C,GAA5C,CAAJ;;GALJ,MAOO,IAAIJ,IAAI,CAACuD,QAAL,CAAcP,CAAd,EAAiB9C,IAAjB,CAAJ,EAA4B;IACjC+C,CAAC,GAAG9C,GAAJ;;;EAEF,OAAO8C,CAAP;AACD;AAGD;;AACA,SAAgBO,aAAgBC,OAAYL,KAAQM,SAAiBC;EACnE,EAAUD,OAAO,GAAG,CAApB,4CAAAtB,SAAS,QAAc,eAAd,CAAT,GAAAA,SAAS,OAAT;;EAEA,EAAUqB,KAAK,CAACG,MAAN,IAAgBF,OAA1B,4CAAAtB,SAAS,QAA0B,YAA1B,CAAT,GAAAA,SAAS,OAAT;;EAGA,IAAIqB,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;IACtBH,KAAK,CAACI,IAAN,CAAWT,GAAX;IACA,OAAO,IAAP;GAFF,MAGO;IACL,IAAMU,MAAM,GAAGL,KAAK,CAACG,MAAN,KAAiBF,OAAhC,CADK;;IAGL,IAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,EAA0BR,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;MAC3D,OAAOA,GAAP;;;IAGF,IAAIW,EAAE,GAAG,CAAT;QACEC,EAAE,GAAGP,KAAK,CAACG,MADb;;IAGA,OAAOG,EAAE,GAAGC,EAAZ,EAAgB;MACd,IAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;MACA,IAAIL,UAAU,CAACF,KAAK,CAACQ,GAAD,CAAN,EAAab,GAAb,CAAV,IAA+B,CAAnC,EAAsC;QACpCW,EAAE,GAAGE,GAAG,GAAG,CAAX;OADF,MAEO;QACLD,EAAE,GAAGC,GAAL;;;;IAGJR,KAAK,CAACS,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBX,GAApB;IACA,OAAOU,MAAM,GAAGL,KAAK,CAACU,GAAN,EAAH,GAAkB,IAA/B;;AAEH;;AC5ED;;;;;;AAKA,IAAaC,QAAb;AAYE;;;;;;AAMA,kBAAsBC,QAAtB,EAAwCC,MAAxC,EAAyD5C,IAAzD;EACEM,4BAA4B,CAAChC,IAAI,CAACC,MAAL,CAAYoE,QAAZ,CAAD,EAAwBlD,YAAY,CAACE,KAArC,CAA5B;EAEA,KAAKgD,QAAL,GAAgBA,QAAhB;EACA,KAAKC,MAAL,GAAcA,MAAd;EACA,KAAK5C,IAAL,GAAYA,IAAZ;AACD,CAxBH;AAKE;;;AAGA;AACA;;AACuB0C,YAAA,gBAAgB,IAAIA,QAAJ,CAAa,CAAb,EAAgB,KAAhB,EAAuB,MAAvB,CAAhB;AAiBzB,IAAMG,GAAG,GAAGH,QAAQ,CAACG,GAArB;;;AChCA;;;;AAGA,IAAaC,KAAb;EAAA;;EAIE,eAAmBC,OAAnB,EAAqClC,OAArC,EAAsD8B,QAAtD,EAAwEC,MAAxE,EAAyF5C,IAAzF;;;IACE,6BAAM2C,QAAN,EAAgBC,MAAhB,EAAwB5C,IAAxB;IACA,MAAK+C,OAAL,GAAeA,OAAf;IACA,MAAKlC,OAAL,GAAeD,uBAAuB,CAACC,OAAD,CAAtC;;;;;;;;;EAPJ;;EAAA,OAcSmC,MAdT,GAcS,gBAAOC,KAAP;;IAEL,IAAI,SAASA,KAAb,EAAoB;MAClB,OAAO,IAAP;;;IAEF,OAAO,KAAKF,OAAL,KAAiBE,KAAK,CAACF,OAAvB,IAAkC,KAAKlC,OAAL,KAAiBoC,KAAK,CAACpC,OAAhE;;;;;;;;;;EAnBJ,OA4BSqC,WA5BT,GA4BS,qBAAYD,KAAZ;IACL,EAAU,KAAKF,OAAL,KAAiBE,KAAK,CAACF,OAAjC,4CAAArC,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,EAAU,KAAKG,OAAL,KAAiBoC,KAAK,CAACpC,OAAjC,4CAAAH,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,KAAKG,OAAL,CAAasC,WAAb,KAA6BF,KAAK,CAACpC,OAAN,CAAcsC,WAAd,EAApC;GA/BJ;;EAAA;AAAA,EAA2BT,QAA3B;AAmCA;;;;AAGA,SAAgBU,eAAeC,WAAqBC;EAClD,IAAID,SAAS,YAAYP,KAArB,IAA8BQ,SAAS,YAAYR,KAAvD,EAA8D;IAC5D,OAAOO,SAAS,CAACL,MAAV,CAAiBM,SAAjB,CAAP;GADF,MAEO,IAAID,SAAS,YAAYP,KAAzB,EAAgC;IACrC,OAAO,KAAP;GADK,MAEA,IAAIQ,SAAS,YAAYR,KAAzB,EAAgC;IACrC,OAAO,KAAP;GADK,MAEA;IACL,OAAOO,SAAS,KAAKC,SAArB;;AAEH;;AAGD,IAAaC,IAAI,sBAEdxF,OAAO,CAACyF,OAFM,iBAEI,IAAIV,KAAJ;AAEjB;AACA/E,OAAO,CAACyF,OAHS,EAIjB,4CAJiB,EAKjB,CALiB,EAMjB,MANiB,EAOjB,aAPiB,CAFJ,QAWdzF,OAAO,CAAC0F,IAXM,iBAWC,IAAIX,KAAJ,CAAU/E,OAAO,CAAC0F,IAAlB,EAAwB,4CAAxB,EAAsE,CAAtE,EAAyE,MAAzE,EAAiF,cAAjF,CAXD,QAYd1F,OAAO,CAAC2F,MAZM,iBAYG,IAAIZ,KAAJ,CAAU/E,OAAO,CAAC2F,MAAlB,EAA0B,4CAA1B,EAAwE,CAAxE,EAA2E,MAA3E,EAAmF,cAAnF,CAZH,QAAV;;;ACjDP,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxB/F,QAAQ,CAACgG,UADe,IACFN,OAAO,CAACM,UADN,wBAExBhG,QAAQ,CAACiG,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxBjG,QAAQ,CAACkG,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClBnG,QAAQ,CAACgG,UADS,KAAA,mBAElBhG,QAAQ,CAACiG,aAFS,KAAA,mBAGlBjG,QAAQ,CAACkG,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;EAIE,kBAAmBC,SAAnB,EAAyCC,WAAzC;QAAyCA;MAAAA,cAAyB9F;;;IAChE,KAAK6F,SAAL,GAAiBpD,cAAc,CAACoD,SAAD,CAA/B;IACA,KAAKC,WAAL,GAAmBrD,cAAc,CAACqD,WAAD,CAAjC;GANJ;;;EAAA;;EAAA,OAmBSC,MAnBT,GAmBS;IACL,OAAO,IAAIH,QAAJ,CAAa,KAAKE,WAAlB,EAA+B,KAAKD,SAApC,CAAP;GApBJ;;EAAA,OAuBS5C,GAvBT,GAuBS,aAAIuB,KAAJ;IACL,IAAMwB,WAAW,GAAGxB,KAAK,YAAYoB,QAAjB,GAA4BpB,KAA5B,GAAoC,IAAIoB,QAAJ,CAAanD,cAAc,CAAC+B,KAAD,CAA3B,CAAxD;;IACA,IAAI3E,IAAI,CAACoG,KAAL,CAAW,KAAKH,WAAhB,EAA6BE,WAAW,CAACF,WAAzC,CAAJ,EAA2D;MACzD,OAAO,IAAIF,QAAJ,CAAa/F,IAAI,CAACoD,GAAL,CAAS,KAAK4C,SAAd,EAAyBG,WAAW,CAACH,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;;;IAEF,OAAO,IAAIF,QAAJ,CACL/F,IAAI,CAACoD,GAAL,CACEpD,IAAI,CAACqG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADF,EAEEjG,IAAI,CAACqG,QAAL,CAAcF,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLjG,IAAI,CAACqG,QAAL,CAAc,KAAKJ,WAAnB,EAAgCE,WAAW,CAACF,WAA5C,CALK,CAAP;GA5BJ;;EAAA,OAqCSK,QArCT,GAqCS,kBAAS3B,KAAT;IACL,IAAMwB,WAAW,GAAGxB,KAAK,YAAYoB,QAAjB,GAA4BpB,KAA5B,GAAoC,IAAIoB,QAAJ,CAAanD,cAAc,CAAC+B,KAAD,CAA3B,CAAxD;;IACA,IAAI3E,IAAI,CAACoG,KAAL,CAAW,KAAKH,WAAhB,EAA6BE,WAAW,CAACF,WAAzC,CAAJ,EAA2D;MACzD,OAAO,IAAIF,QAAJ,CAAa/F,IAAI,CAACsG,QAAL,CAAc,KAAKN,SAAnB,EAA8BG,WAAW,CAACH,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;;;IAEF,OAAO,IAAIF,QAAJ,CACL/F,IAAI,CAACsG,QAAL,CACEtG,IAAI,CAACqG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADF,EAEEjG,IAAI,CAACqG,QAAL,CAAcF,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLjG,IAAI,CAACqG,QAAL,CAAc,KAAKJ,WAAnB,EAAgCE,WAAW,CAACF,WAA5C,CALK,CAAP;GA1CJ;;EAAA,OAmDS3C,QAnDT,GAmDS,kBAASqB,KAAT;IACL,IAAMwB,WAAW,GAAGxB,KAAK,YAAYoB,QAAjB,GAA4BpB,KAA5B,GAAoC,IAAIoB,QAAJ,CAAanD,cAAc,CAAC+B,KAAD,CAA3B,CAAxD;IACA,OAAO3E,IAAI,CAACsD,QAAL,CACLtD,IAAI,CAACqG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAELjG,IAAI,CAACqG,QAAL,CAAcF,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;GArDJ;;EAAA,OA2DSM,OA3DT,GA2DS,iBAAQ5B,KAAR;IACL,IAAMwB,WAAW,GAAGxB,KAAK,YAAYoB,QAAjB,GAA4BpB,KAA5B,GAAoC,IAAIoB,QAAJ,CAAanD,cAAc,CAAC+B,KAAD,CAA3B,CAAxD;IACA,OAAO3E,IAAI,CAACoG,KAAL,CACLpG,IAAI,CAACqG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAELjG,IAAI,CAACqG,QAAL,CAAcF,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;GA7DJ;;EAAA,OAmES9C,WAnET,GAmES,qBAAYwB,KAAZ;IACL,IAAMwB,WAAW,GAAGxB,KAAK,YAAYoB,QAAjB,GAA4BpB,KAA5B,GAAoC,IAAIoB,QAAJ,CAAanD,cAAc,CAAC+B,KAAD,CAA3B,CAAxD;IACA,OAAO3E,IAAI,CAACmD,WAAL,CACLnD,IAAI,CAACqG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAELjG,IAAI,CAACqG,QAAL,CAAcF,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;GArEJ;;EAAA,OA2ESI,QA3ET,GA2ES,kBAAS1B,KAAT;IACL,IAAMwB,WAAW,GAAGxB,KAAK,YAAYoB,QAAjB,GAA4BpB,KAA5B,GAAoC,IAAIoB,QAAJ,CAAanD,cAAc,CAAC+B,KAAD,CAA3B,CAAxD;IACA,OAAO,IAAIoB,QAAJ,CACL/F,IAAI,CAACqG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACH,SAA1C,CADK,EAELhG,IAAI,CAACqG,QAAL,CAAc,KAAKJ,WAAnB,EAAgCE,WAAW,CAACF,WAA5C,CAFK,CAAP;GA7EJ;;EAAA,OAmFS5C,MAnFT,GAmFS,gBAAOsB,KAAP;IACL,IAAMwB,WAAW,GAAGxB,KAAK,YAAYoB,QAAjB,GAA4BpB,KAA5B,GAAoC,IAAIoB,QAAJ,CAAanD,cAAc,CAAC+B,KAAD,CAA3B,CAAxD;IACA,OAAO,IAAIoB,QAAJ,CACL/F,IAAI,CAACqG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAELjG,IAAI,CAACqG,QAAL,CAAc,KAAKJ,WAAnB,EAAgCE,WAAW,CAACH,SAA5C,CAFK,CAAP;GArFJ;;EAAA,OA2FSQ,aA3FT,GA2FS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;;;;QACnCD;MAAAA,WAAqBhH,QAAQ,CAACiG;;;IAE9B,CAAUiB,MAAM,CAACC,SAAP,CAAiBL,iBAAjB,CAAV,2CAAArE,SAAS,QAAyCqE,iBAAzC,yBAAT,GAAArE,SAAS,OAAT;IACA,EAAUqE,iBAAiB,GAAG,CAA9B,4CAAArE,SAAS,QAA2BqE,iBAA3B,uBAAT,GAAArE,SAAS,OAAT;IAEAiD,OAAO,CAAC0B,GAAR,CAAY;MAAEC,SAAS,EAAEP,iBAAiB,GAAG,CAAjC;MAAoCE,QAAQ,EAAEjB,qBAAqB,CAACiB,QAAD;KAA/E;IACA,IAAMM,QAAQ,GAAG,IAAI5B,OAAJ,CAAY,KAAKW,SAAL,CAAelD,QAAf,EAAZ,EACdoE,GADc,CACV,KAAKjB,WAAL,CAAiBnD,QAAjB,EADU,EAEdqE,mBAFc,CAEMV,iBAFN,CAAjB;IAGA,OAAOQ,QAAQ,CAAC3B,QAAT,CAAkB2B,QAAQ,CAACG,aAAT,EAAlB,EAA4CV,MAA5C,CAAP;GAvGJ;;EAAA,OA0GSW,OA1GT,GA0GS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QAELD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;;;;QACnCD;MAAAA,WAAqBhH,QAAQ,CAACiG;;;IAE9B,CAAUiB,MAAM,CAACC,SAAP,CAAiBM,aAAjB,CAAV,2CAAAhF,SAAS,QAAqCgF,aAArC,yBAAT,GAAAhF,SAAS,OAAT;IACA,EAAUgF,aAAa,IAAI,CAA3B,4CAAAhF,SAAS,QAAwBgF,aAAxB,mBAAT,GAAAhF,SAAS,OAAT;IAEAoD,GAAG,CAAC8B,EAAJ,GAASF,aAAT;IACA5B,GAAG,CAAC+B,EAAJ,GAASzB,eAAe,CAACa,QAAD,CAAxB;IACA,OAAO,IAAInB,GAAJ,CAAQ,KAAKQ,SAAL,CAAelD,QAAf,EAAR,EAAmCoE,GAAnC,CAAuC,KAAKjB,WAAL,CAAiBnD,QAAjB,EAAvC,EAAoEwC,QAApE,CAA6E8B,aAA7E,EAA4FV,MAA5F,CAAP;GApHJ;;EAAA;IAAA;IAAA,KAUE;MACE,OAAO1G,IAAI,CAACqD,MAAL,CAAY,KAAK2C,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;KAXJ;;;IAAA;IAAA,KAeE;MACE,OAAO,IAAIF,QAAJ,CAAa/F,IAAI,CAACwH,SAAL,CAAe,KAAKxB,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;;;;EAhBJ;AAAA;;ACdA,IAAMT,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAagC,cAAb;EAAA;;;EAYE,wBAAsBC,QAAtB,EAA0CC,MAA1C;;;IACE,IAAMC,YAAY,GAAGhF,cAAc,CAAC+E,MAAD,CAAnC;IACA3F,4BAA4B,CAAC4F,YAAD,EAAezG,YAAY,CAACG,OAA5B,CAA5B;IAEA,6BAAMsG,YAAN,EAAoB5H,IAAI,CAAC6H,YAAL,CAAkBtH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYyH,QAAQ,CAACrD,QAArB,CAAvB,CAApB;IACA,MAAKqD,QAAL,GAAgBA,QAAhB;;;;;;;;;EAjBJ,eAOgBI,GAPhB,GAOS,aAAWH,MAAX;IACL,OAAO,IAAIF,cAAJ,CAAmBlD,GAAnB,EAAwBoD,MAAxB,CAAP;GARJ;;EAAA;;EAAA,OAwBSvE,GAxBT,GAwBS,aAAIuB,KAAJ;IACL,CAAUG,cAAc,CAAC,KAAK4C,QAAN,EAAgB/C,KAAK,CAAC+C,QAAtB,CAAxB,2CAAAtF,SAAS,QAAgD,OAAhD,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,IAAIqF,cAAJ,CAAmB,KAAKC,QAAxB,EAAkC1H,IAAI,CAACoD,GAAL,CAAS,KAAK2E,GAAd,EAAmBpD,KAAK,CAACoD,GAAzB,CAAlC,CAAP;GA1BJ;;EAAA,OA6BSzB,QA7BT,GA6BS,kBAAS3B,KAAT;IACL,CAAUG,cAAc,CAAC,KAAK4C,QAAN,EAAgB/C,KAAK,CAAC+C,QAAtB,CAAxB,2CAAAtF,SAAS,QAAgD,OAAhD,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,IAAIqF,cAAJ,CAAmB,KAAKC,QAAxB,EAAkC1H,IAAI,CAACsG,QAAL,CAAc,KAAKyB,GAAnB,EAAwBpD,KAAK,CAACoD,GAA9B,CAAlC,CAAP;GA/BJ;;EAAA,OAkCSvB,aAlCT,GAkCS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QACLF;MAAAA,oBAA4B;;;QAE5BE;MAAAA,WAAqBhH,QAAQ,CAACgG;;;IAE9B,2BAAaa,aAAb,YAA2BC,iBAA3B,EAA8CC,MAA9C,EAAsDC,QAAtD;GAvCJ;;EAAA,OA0CSU,OA1CT,GA0CS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QACLS;MAAAA,gBAAwB,KAAKM,QAAL,CAAcrD;;;QAEtCsC;MAAAA,WAAqBhH,QAAQ,CAACgG;;;IAE9B,EAAUyB,aAAa,IAAI,KAAKM,QAAL,CAAcrD,QAAzC,4CAAAjC,SAAS,QAA0C,UAA1C,CAAT,GAAAA,SAAS,OAAT;IACA,2BAAaiF,OAAb,YAAqBD,aAArB,EAAoCV,MAApC,EAA4CC,QAA5C;GAhDJ;;EAAA,OAmDSqB,OAnDT,GAmDS,iBAAQtB,MAAR;QAAQA;MAAAA,SAAiB;QAAEE,cAAc,EAAE;;;;IAChDpB,KAAG,CAAC8B,EAAJ,GAAS,KAAKI,QAAL,CAAcrD,QAAvB;IACA,OAAO,IAAImB,KAAJ,CAAQ,KAAKQ,SAAL,CAAelD,QAAf,EAAR,EAAmCoE,GAAnC,CAAuC,KAAKjB,WAAL,CAAiBnD,QAAjB,EAAvC,EAAoEwC,QAApE,CAA6EoB,MAA7E,CAAP;GArDJ;;EAAA;IAAA;IAAA,KAoBE;MACE,OAAO,KAAKV,SAAZ;;;;EArBJ;AAAA,EAAoCD,QAApC;;ICNakC,WAAb;EAAA;;;EAIE,qBAAmBC,KAAnB,EAAiCP,MAAjC;;;IACE,mCAAMO,KAAN,EAAaP,MAAb;IACA,MAAKO,KAAL,GAAaA,KAAb;;;;EANJ;;EAAA,OASS9E,GATT,GASS,aAAIuB,KAAJ;IACL,CAAU,KAAKuD,KAAL,CAAWxD,MAAX,CAAkBC,KAAK,CAACuD,KAAxB,CAAV,2CAAA9F,SAAS,QAAiC,OAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,IAAI6F,WAAJ,CAAgB,KAAKC,KAArB,EAA4BlI,IAAI,CAACoD,GAAL,CAAS,KAAK2E,GAAd,EAAmBpD,KAAK,CAACoD,GAAzB,CAA5B,CAAP;GAXJ;;EAAA,OAcSzB,QAdT,GAcS,kBAAS3B,KAAT;IACL,CAAU,KAAKuD,KAAL,CAAWxD,MAAX,CAAkBC,KAAK,CAACuD,KAAxB,CAAV,2CAAA9F,SAAS,QAAiC,OAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,IAAI6F,WAAJ,CAAgB,KAAKC,KAArB,EAA4BlI,IAAI,CAACsG,QAAL,CAAc,KAAKyB,GAAnB,EAAwBpD,KAAK,CAACoD,GAA9B,CAA5B,CAAP;GAhBJ;;EAAA;AAAA,EAAiCN,cAAjC;;ICKaU,KAAb;EAAA;;;EAkBE,eAAmBC,YAAnB,EAA2CC,aAA3C,EAAoEpC,WAApE,EAA4FD,SAA5F;;;IACE,6BAAMA,SAAN,EAAiBC,WAAjB;IAEA,MAAKmC,YAAL,GAAoBA,YAApB;IACA,MAAKC,aAAL,GAAqBA,aAArB;IACA,MAAKC,MAAL,GAAc,IAAIvC,QAAJ,CACZ/F,IAAI,CAAC6H,YAAL,CAAkBtH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYmI,YAAY,CAAC/D,QAAzB,CAAvB,CADY,EAEZrE,IAAI,CAAC6H,YAAL,CAAkBtH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYoI,aAAa,CAAChE,QAA1B,CAAvB,CAFY,CAAd;;;;EAvBJ,MAKgBkE,SALhB,GAKS,mBAAiBC,KAAjB;IACL,IAAMC,MAAM,GAAY,EAAxB;;IACA,qDAAwBD,KAAK,CAACE,KAAN,CAAYC,OAAZ,EAAxB,wCAA+C;MAAA;UAAnCC,CAAmC;UAAhCC,IAAgC;MAC7CJ,MAAM,CAAC5E,IAAP,CACE2E,KAAK,CAACM,IAAN,CAAWF,CAAX,EAAclE,MAAd,CAAqBmE,IAAI,CAACE,MAA1B,IACI,IAAIZ,KAAJ,CAAUU,IAAI,CAACG,QAAL,CAActB,QAAxB,EAAkCmB,IAAI,CAACI,QAAL,CAAcvB,QAAhD,EAA0DmB,IAAI,CAACG,QAAL,CAAcjB,GAAxE,EAA6Ec,IAAI,CAACI,QAAL,CAAclB,GAA3F,CADJ,GAEI,IAAII,KAAJ,CAAUU,IAAI,CAACI,QAAL,CAAcvB,QAAxB,EAAkCmB,IAAI,CAACG,QAAL,CAActB,QAAhD,EAA0DmB,IAAI,CAACI,QAAL,CAAclB,GAAxE,EAA6Ec,IAAI,CAACG,QAAL,CAAcjB,GAA3F,CAHN;;;IAMF,OAAOU,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd;MAAA,OAA+BD,WAAW,CAAC/C,QAAZ,CAAqBgD,YAArB,CAA/B;KAAvB,EAA0FZ,MAAM,CAAC,CAAD,CAAhG,CAAP;GAdJ;;EAAA;;EAAA,OAqCSvC,MArCT,GAqCS;IACL,OAAO,IAAIiC,KAAJ,CAAU,KAAKE,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAKpC,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;GAtCJ;;EAAA,OAyCSI,QAzCT,GAyCS,kBAAS1B,KAAT;IACL,CAAUG,cAAc,CAAC,KAAKuD,aAAN,EAAqB1D,KAAK,CAACyD,YAA3B,CAAxB,2CAAAhG,SAAS,QAAyD,OAAzD,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAMkH,QAAQ,uBAASjD,QAAT,YAAkB1B,KAAlB,CAAd;;IACA,OAAO,IAAIwD,KAAJ,CAAU,KAAKC,YAAf,EAA6BzD,KAAK,CAAC0D,aAAnC,EAAkDiB,QAAQ,CAACrD,WAA3D,EAAwEqD,QAAQ,CAACtD,SAAjF,CAAP;GA5CJ;;;EAAA,OAgDSuD,KAhDT,GAgDS,eAAMC,cAAN;IACL,CAAU1E,cAAc,CAAC0E,cAAc,CAAC9B,QAAhB,EAA0B,KAAKU,YAA/B,CAAxB,2CAAAhG,SAAS,QAA6D,OAA7D,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAI,KAAKiG,aAAL,YAA8B7D,KAAlC,EAAyC;MACvC,OAAO,IAAIyD,WAAJ,CAAgB,KAAKI,aAArB,EAAoC,oBAAMhC,QAAN,YAAemD,cAAc,CAACzB,GAA9B,EAAmCd,QAAvE,CAAP;;;IAEF,OAAOQ,cAAc,CAACK,GAAf,CAAmB,oBAAMzB,QAAN,YAAemD,cAAc,CAACzB,GAA9B,EAAmCd,QAAtD,CAAP;GArDJ;;EAAA,OAwDST,aAxDT,GAwDS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;MAAAA,oBAA4B;;;IAC/C,OAAO,KAAKgD,QAAL,CAAcjD,aAAd,CAA4BC,iBAA5B,EAA+CC,MAA/C,EAAuDC,QAAvD,CAAP;GAzDJ;;EAAA,OA4DSU,OA5DT,GA4DS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;MAAAA,gBAAwB;;;IACrC,OAAO,KAAKqC,QAAL,CAAcpC,OAAd,CAAsBD,aAAtB,EAAqCV,MAArC,EAA6CC,QAA7C,CAAP;GA7DJ;;EAAA;IAAA;IAAA,KA6BE;MACE,OAAO,IAAIZ,QAAJ,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;;;IA9BJ;IAAA,KAiCE;MACE,2BAAaI,QAAb,YAAsB,KAAKiC,MAA3B;;;;EAlCJ;AAAA,EAA2BvC,QAA3B;;ACTA,IAAM2D,YAAY,gBAAG,IAAI3D,QAAJ,CAAavF,IAAb,CAArB;;AAEA,IAAamJ,OAAb;EAAA;;EAAA;IAAA;;;EAAA;;EAAA,OACSnD,aADT,GACS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;MAAAA,oBAA4B;;;IAC/C,OAAO,KAAKJ,QAAL,CAAcqD,YAAd,EAA4BlD,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;GAFJ;;EAAA,OAKSU,OALT,GAKS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;MAAAA,gBAAwB;;;IACrC,OAAO,KAAKf,QAAL,CAAcqD,YAAd,EAA4BrC,OAA5B,CAAoCD,aAApC,EAAmDV,MAAnD,EAA2DC,QAA3D,CAAP;GANJ;;EAAA;AAAA,EAA6BZ,QAA7B;;AC4BA,IAAI6D,kBAAkB,GAAqE,EAA3F;AAEA,IAAaC,IAAb;EAwBE,cAAmBC,YAAnB,EAA8CC,YAA9C;IACE,IAAMC,YAAY,GAAGF,YAAY,CAAC5B,KAAb,CAAmBtD,WAAnB,CAA+BmF,YAAY,CAAC7B,KAA5C;MACjB,CAAC4B,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;IAGA,KAAKG,cAAL,GAAsB,IAAIzF,KAAJ,CACpBwF,YAAY,CAAC,CAAD,CAAZ,CAAgB9B,KAAhB,CAAsBzD,OADF,EAEpBoF,IAAI,CAACpH,UAAL,CAAgBuH,YAAY,CAAC,CAAD,CAAZ,CAAgB9B,KAAhC,EAAuC8B,YAAY,CAAC,CAAD,CAAZ,CAAgB9B,KAAvD,CAFoB,EAGpB,EAHoB,EAIpB,SAJoB,EAKpB,aALoB,CAAtB;IAOA,KAAK8B,YAAL,GAAoBA,YAApB;;;EAnCJ,KAIgBvH,UAJhB,GAIS,oBAAkByH,MAAlB,EAAiCC,MAAjC;;;IACL,IAAMC,MAAM,GAAGF,MAAM,CAACtF,WAAP,CAAmBuF,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT,CAA/D;;IAEA,IAAI,wBAAAN,kBAAkB,UAAlB,2FAAqBQ,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAA/B,iFAA0C6H,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAApD,OAAiE8H,SAArE,EAAgF;MAAA;;MAC9ET,kBAAkB,gBACbA,kBADa,6BAEfQ,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAFK,yCAGXqH,kBAHW,yDAGX,qBAAqBQ,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAA/B,CAHW,6BAIb6H,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAJG,IAIO+H,iBAAiB,CACpC1K,eADoC,EAEpC2K,SAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,IAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACJ,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAAX,EAAoB6H,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAA9B,CAAzB,CAAL,CAAZ,CAF2B,EAGpCzC,cAHoC,CAJxB,0BAAlB;;;IAaF,OAAO8J,kBAAkB,CAACQ,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAAX,CAAlB,CAAsC6H,MAAM,CAAC,CAAD,CAAN,CAAU7H,OAAhD,CAAP;;;;;;;;EArBJ;;EAAA,OA0CSkI,aA1CT,GA0CS,uBAAcvC,KAAd;IACL,OAAOA,KAAK,CAACxD,MAAN,CAAa,KAAKqE,MAAlB,KAA6Bb,KAAK,CAACxD,MAAN,CAAa,KAAKgG,MAAlB,CAApC;;;;;;;;;;;EA3CJ,OAgESC,OAhET,GAgES,iBAAQzC,KAAR;IACL,CAAU,KAAKuC,aAAL,CAAmBvC,KAAnB,CAAV,2CAAA9F,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO8F,KAAK,CAACxD,MAAN,CAAa,KAAKqE,MAAlB,IAA4B,KAAK6B,WAAjC,GAA+C,KAAKC,WAA3D;;;;;;;EAlEJ,OA4FSC,SA5FT,GA4FS,mBAAU5C,KAAV;IACL,CAAU,KAAKuC,aAAL,CAAmBvC,KAAnB,CAAV,2CAAA9F,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO8F,KAAK,CAACxD,MAAN,CAAa,KAAKqE,MAAlB,IAA4B,KAAKC,QAAjC,GAA4C,KAAKC,QAAxD;GA9FJ;;EAAA,OAiGS8B,eAjGT,GAiGS,yBAAgBC,WAAhB,EAA0CC,iBAA1C;IACL,CAAU,KAAKR,aAAL,CAAmBO,WAAW,CAAC9C,KAA/B,CAAV,2CAAA9F,SAAS,QAAwC,OAAxC,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAIpC,IAAI,CAACoG,KAAL,CAAW,KAAK4C,QAAL,CAAcjB,GAAzB,EAA8B7H,IAA9B,KAAuCF,IAAI,CAACoG,KAAL,CAAW,KAAK6C,QAAL,CAAclB,GAAzB,EAA8B7H,IAA9B,CAA3C,EAAgF;MAC9E,MAAM,IAAIuB,yBAAJ,EAAN;;;IAEF,IAAMyJ,YAAY,GAAG,KAAKJ,SAAL,CAAeE,WAAW,CAAC9C,KAA3B,CAArB;IACA,IAAMiD,aAAa,GAAG,KAAKL,SAAL,CAAeE,WAAW,CAAC9C,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKqE,MAA9B,IAAwC,KAAK2B,MAA7C,GAAsD,KAAK3B,MAA1E,CAAtB;;IAEA,IAAMqC,kBAAkB,GAAGpL,IAAI,CAACqG,QAAL,CAAc2E,WAAW,CAACjD,GAA1B,EAA+B,KAAKsD,iBAAL,CAAuBJ,iBAAvB,CAA/B,CAA3B;IACA,IAAMjF,SAAS,GAAGhG,IAAI,CAACqG,QAAL,CAAc+E,kBAAd,EAAkCD,aAAa,CAACpD,GAAhD,CAAlB;IACA,IAAM9B,WAAW,GAAGjG,IAAI,CAACoD,GAAL,CAASpD,IAAI,CAACqG,QAAL,CAAc6E,YAAY,CAACnD,GAA3B,EAAgCjH,MAAhC,CAAT,EAAkDsK,kBAAlD,CAApB;IACA,IAAME,YAAY,GAAG,IAAIrD,WAAJ,CACnB+C,WAAW,CAAC9C,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKqE,MAA9B,IAAwC,KAAK2B,MAA7C,GAAsD,KAAK3B,MADxC,EAEnB/I,IAAI,CAACqD,MAAL,CAAY2C,SAAZ,EAAuBC,WAAvB,CAFmB,CAArB;;IAIA,IAAIjG,IAAI,CAACoG,KAAL,CAAWkF,YAAY,CAACvD,GAAxB,EAA6B7H,IAA7B,CAAJ,EAAwC;MACtC,MAAM,IAAI6B,4BAAJ,EAAN;;;IAEF,OAAO,CAACuJ,YAAD,EAAe,IAAIzB,IAAJ,CAASqB,YAAY,CAAC9H,GAAb,CAAiB4H,WAAjB,CAAT,EAAwCG,aAAa,CAAC7E,QAAd,CAAuBgF,YAAvB,CAAxC,CAAf,CAAP;GAnHJ;;EAAA,OAsHSC,cAtHT,GAsHS,wBAAeD,YAAf,EAA0CL,iBAA1C;IACL,CAAU,KAAKR,aAAL,CAAmBa,YAAY,CAACpD,KAAhC,CAAV,2CAAA9F,SAAS,QAAyC,OAAzC,CAAT,GAAAA,SAAS,OAAT;;IACA,IACEpC,IAAI,CAACoG,KAAL,CAAW,KAAK4C,QAAL,CAAcjB,GAAzB,EAA8B7H,IAA9B,KACAF,IAAI,CAACoG,KAAL,CAAW,KAAK6C,QAAL,CAAclB,GAAzB,EAA8B7H,IAA9B,CADA,IAEAF,IAAI,CAACmC,kBAAL,CAAwBmJ,YAAY,CAACvD,GAArC,EAA0C,KAAK+C,SAAL,CAAeQ,YAAY,CAACpD,KAA5B,EAAmCH,GAA7E,CAHF,EAIE;MACA,MAAM,IAAItG,yBAAJ,EAAN;;;IAGF,IAAM0J,aAAa,GAAG,KAAKL,SAAL,CAAeQ,YAAY,CAACpD,KAA5B,CAAtB;IACA,IAAMgD,YAAY,GAAG,KAAKJ,SAAL,CAAeQ,YAAY,CAACpD,KAAb,CAAmBxD,MAAnB,CAA0B,KAAKqE,MAA/B,IAAyC,KAAK2B,MAA9C,GAAuD,KAAK3B,MAA3E,CAArB;IACA,IAAM/C,SAAS,GAAGhG,IAAI,CAACqG,QAAL,CAAcrG,IAAI,CAACqG,QAAL,CAAc6E,YAAY,CAACnD,GAA3B,EAAgCuD,YAAY,CAACvD,GAA7C,CAAd,EAAiEjH,MAAjE,CAAlB;IACA,IAAMmF,WAAW,GAAGjG,IAAI,CAACqG,QAAL,CAAcrG,IAAI,CAACsG,QAAL,CAAc6E,aAAa,CAACpD,GAA5B,EAAiCuD,YAAY,CAACvD,GAA9C,CAAd,EAAkE,KAAKsD,iBAAL,CAAuBJ,iBAAvB,CAAlE,CAApB;IACA,IAAMD,WAAW,GAAG,IAAI/C,WAAJ,CAClBqD,YAAY,CAACpD,KAAb,CAAmBxD,MAAnB,CAA0B,KAAKqE,MAA/B,IAAyC,KAAK2B,MAA9C,GAAuD,KAAK3B,MAD1C,EAElB/I,IAAI,CAACoD,GAAL,CAASpD,IAAI,CAACqD,MAAL,CAAY2C,SAAZ,EAAuBC,WAAvB,CAAT,EAA8C9F,GAA9C,CAFkB,CAApB;IAIA,OAAO,CAAC6K,WAAD,EAAc,IAAInB,IAAJ,CAASqB,YAAY,CAAC9H,GAAb,CAAiB4H,WAAjB,CAAT,EAAwCG,aAAa,CAAC7E,QAAd,CAAuBgF,YAAvB,CAAxC,CAAd,CAAP;GAxIJ;;EAAA,OA2ISE,kBA3IT,GA2IS,4BACLC,WADK,EAEL3B,YAFK,EAGLC,YAHK;IAKL,CAAU0B,WAAW,CAACvD,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKuF,cAA9B,CAAV,2CAAA7H,SAAS,QAAgD,WAAhD,CAAT,GAAAA,SAAS,OAAT;IACA,IAAM4H,YAAY,GAAGF,YAAY,CAAC5B,KAAb,CAAmBtD,WAAnB,CAA+BmF,YAAY,CAAC7B,KAA5C;MACjB,CAAC4B,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;IAGA,EAAUE,YAAY,CAAC,CAAD,CAAZ,CAAgB9B,KAAhB,CAAsBxD,MAAtB,CAA6B,KAAKqE,MAAlC,KAA6CiB,YAAY,CAAC,CAAD,CAAZ,CAAgB9B,KAAhB,CAAsBxD,MAAtB,CAA6B,KAAKgG,MAAlC,CAAvD,4CAAAtI,SAAS,QAAyF,OAAzF,CAAT,GAAAA,SAAS,OAAT;IAEA,IAAIsJ,SAAJ;;IACA,IAAI1L,IAAI,CAACoG,KAAL,CAAWqF,WAAW,CAAC1D,GAAvB,EAA4B7H,IAA5B,CAAJ,EAAuC;MACrCwL,SAAS,GAAG1L,IAAI,CAACsG,QAAL,CAAcvD,IAAI,CAAC/C,IAAI,CAACqG,QAAL,CAAc2D,YAAY,CAAC,CAAD,CAAZ,CAAgBjC,GAA9B,EAAmCiC,YAAY,CAAC,CAAD,CAAZ,CAAgBjC,GAAnD,CAAD,CAAlB,EAA6EhI,iBAA7E,CAAZ;KADF,MAEO;MACL,IAAM4L,OAAO,GAAG3L,IAAI,CAACqD,MAAL,CAAYrD,IAAI,CAACqG,QAAL,CAAc2D,YAAY,CAAC,CAAD,CAAZ,CAAgBjC,GAA9B,EAAmC0D,WAAW,CAAC1D,GAA/C,CAAZ,EAAiE,KAAKiB,QAAL,CAAcjB,GAA/E,CAAhB;MACA,IAAM6D,OAAO,GAAG5L,IAAI,CAACqD,MAAL,CAAYrD,IAAI,CAACqG,QAAL,CAAc2D,YAAY,CAAC,CAAD,CAAZ,CAAgBjC,GAA9B,EAAmC0D,WAAW,CAAC1D,GAA/C,CAAZ,EAAiE,KAAKkB,QAAL,CAAclB,GAA/E,CAAhB;MACA2D,SAAS,GAAG1L,IAAI,CAACqC,eAAL,CAAqBsJ,OAArB,EAA8BC,OAA9B,IAAyCD,OAAzC,GAAmDC,OAA/D;;;IAEF,IAAI,CAAC5L,IAAI,CAACmD,WAAL,CAAiBuI,SAAjB,EAA4BxL,IAA5B,CAAL,EAAwC;MACtC,MAAM,IAAI6B,4BAAJ,EAAN;;;IAEF,OAAO,IAAIkG,WAAJ,CAAgB,KAAKgC,cAArB,EAAqCyB,SAArC,CAAP;GAjKJ;;EAAA,OAoKSG,iBApKT,GAoKS,2BACL3D,KADK,EAELuD,WAFK,EAGLC,SAHK,EAILI,KAJK,EAKLC,KALK;QAILD;MAAAA,QAAiB;;;IAGjB,CAAU,KAAKrB,aAAL,CAAmBvC,KAAnB,CAAV,2CAAA9F,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;IACA,CAAUqJ,WAAW,CAACvD,KAAZ,CAAkBxD,MAAlB,CAAyB,KAAKuF,cAA9B,CAAV,2CAAA7H,SAAS,QAAgD,cAAhD,CAAT,GAAAA,SAAS,OAAT;IACA,CAAUsJ,SAAS,CAACxD,KAAV,CAAgBxD,MAAhB,CAAuB,KAAKuF,cAA5B,CAAV,2CAAA7H,SAAS,QAA8C,WAA9C,CAAT,GAAAA,SAAS,OAAT;IACA,CAAUpC,IAAI,CAACqC,eAAL,CAAqBqJ,SAAS,CAAC3D,GAA/B,EAAoC0D,WAAW,CAAC1D,GAAhD,CAAV,2CAAA3F,SAAS,QAAuD,WAAvD,CAAT,GAAAA,SAAS,OAAT;IAEA,IAAI4J,mBAAJ;;IACA,IAAI,CAACF,KAAL,EAAY;MACVE,mBAAmB,GAAGP,WAAtB;KADF,MAEO;MACL,CAAU,CAAC,CAACM,KAAZ,2CAAA3J,SAAS,QAAU,QAAV,CAAT,GAAAA,SAAS,OAAT;MACA,IAAM6J,WAAW,GAAGrJ,cAAc,CAACmJ,KAAD,CAAlC;;MACA,IAAI,CAAC/L,IAAI,CAACoG,KAAL,CAAW6F,WAAX,EAAwB/L,IAAxB,CAAL,EAAoC;QAClC,IAAMgM,KAAK,GAAGnJ,IAAI,CAAC/C,IAAI,CAACqG,QAAL,CAAc,KAAK2C,QAAL,CAAcjB,GAA5B,EAAiC,KAAKkB,QAAL,CAAclB,GAA/C,CAAD,CAAlB;QACA,IAAMoE,SAAS,GAAGpJ,IAAI,CAACkJ,WAAD,CAAtB;;QACA,IAAIjM,IAAI,CAACmD,WAAL,CAAiB+I,KAAjB,EAAwBC,SAAxB,CAAJ,EAAwC;UACtC,IAAMnG,SAAS,GAAGhG,IAAI,CAACqG,QAAL,CAAcoF,WAAW,CAAC1D,GAA1B,EAA+B/H,IAAI,CAACsG,QAAL,CAAc4F,KAAd,EAAqBC,SAArB,CAA/B,CAAlB;UACA,IAAMlG,WAAW,GAAGjG,IAAI,CAACoD,GAAL,CAASpD,IAAI,CAACqG,QAAL,CAAc6F,KAAd,EAAqB5L,IAArB,CAAT,EAAqC6L,SAArC,CAApB;UACA,IAAMC,YAAY,GAAGpM,IAAI,CAACqD,MAAL,CAAY2C,SAAZ,EAAuBC,WAAvB,CAArB;UACA+F,mBAAmB,GAAGP,WAAW,CAACrI,GAAZ,CAAgB,IAAI6E,WAAJ,CAAgB,KAAKgC,cAArB,EAAqCmC,YAArC,CAAhB,CAAtB;SAJF,MAKO;UACLJ,mBAAmB,GAAGP,WAAtB;;OATJ,MAWO;QACLO,mBAAmB,GAAGP,WAAtB;;;;IAIJ,OAAO,IAAIxD,WAAJ,CACLC,KADK,EAELlI,IAAI,CAACqD,MAAL,CAAYrD,IAAI,CAACqG,QAAL,CAAcqF,SAAS,CAAC3D,GAAxB,EAA6B,KAAK+C,SAAL,CAAe5C,KAAf,EAAsBH,GAAnD,CAAZ,EAAqEiE,mBAAmB,CAACjE,GAAzF,CAFK,CAAP;GAtMJ;;EAAA,OA4MUsD,iBA5MV,GA4MU,2BAAkBJ,iBAAlB;IACN,IAAIA,iBAAiB,KAAKZ,SAA1B,EAAqC;MACnC,OAAO5J,KAAP;;;;IAIF,EAAUwK,iBAAiB,CAAC/C,KAAlB,CAAwB3F,OAAxB,KAAoC1C,oBAA9C,4CAAAuC,SAAS,QAA2D,sBAA3D,CAAT,GAAAA,SAAS,OAAT;;IAEA,IAAKpC,IAAI,CAACmC,kBAAL,CAAwB8I,iBAAiB,CAACjF,SAA1C,EAAqD9E,aAArD,CAAL,EAA0E;MACxE,OAAOL,KAAP;;;IAEF,IAAKb,IAAI,CAACmC,kBAAL,CAAwB8I,iBAAiB,CAACjF,SAA1C,EAAqD/E,YAArD,CAAL,EAAyE;MACvE,OAAOL,KAAP;;;IAEF,IAAKZ,IAAI,CAACmC,kBAAL,CAAwB8I,iBAAiB,CAACjF,SAA1C,EAAqDhF,WAArD,CAAL,EAAwE;MACtE,OAAOL,KAAP;;;IAEF,IAAKX,IAAI,CAACmC,kBAAL,CAAwB8I,iBAAiB,CAACjF,SAA1C,EAAqDjF,UAArD,CAAL,EAAuE;MACrE,OAAOL,KAAP;;;IAEF,OAAOD,KAAP;GAhOJ;;EAAA,OAmOS4L,aAnOT,GAmOS,uBAAcpB,iBAAd;IACL,OAAO,IAAItB,OAAJ,CAAY,KAAK0B,iBAAL,CAAuBJ,iBAAvB,CAAZ,EAAuDnK,MAAvD,CAAP;GApOJ;;EAAA;IAAA;IAAA,KAiDE;MACE,OAAO,IAAIqH,KAAJ,CAAU,KAAKY,MAAf,EAAuB,KAAK2B,MAA5B,EAAoC,KAAKV,YAAL,CAAkB,CAAlB,EAAqBjC,GAAzD,EAA8D,KAAKiC,YAAL,CAAkB,CAAlB,EAAqBjC,GAAnF,CAAP;;;;;;;IAlDJ;IAAA,KAwDE;MACE,OAAO,IAAII,KAAJ,CAAU,KAAKuC,MAAf,EAAuB,KAAK3B,MAA5B,EAAoC,KAAKiB,YAAL,CAAkB,CAAlB,EAAqBjC,GAAzD,EAA8D,KAAKiC,YAAL,CAAkB,CAAlB,EAAqBjC,GAAnF,CAAP;;;IAzDJ;IAAA,KAwEE;MACE,OAAO,KAAKgB,MAAL,CAAYtE,OAAnB;;;IAzEJ;IAAA,KA4EE;MACE,OAAO,KAAKuF,YAAL,CAAkB,CAAlB,EAAqB9B,KAA5B;;;IA7EJ;IAAA,KAgFE;MACE,OAAO,KAAK8B,YAAL,CAAkB,CAAlB,EAAqB9B,KAA5B;;;IAjFJ;IAAA,KAoFE;MACE,OAAO,KAAK8B,YAAL,CAAkB,CAAlB,CAAP;;;IArFJ;IAAA,KAwFE;MACE,OAAO,KAAKA,YAAL,CAAkB,CAAlB,CAAP;;;;EAzFJ;AAAA;;IC3BasC,KAAb;EAOE,eAAmB5D,KAAnB,EAAkC6D,KAAlC,EAAmDC,MAAnD;IACE,EAAU9D,KAAK,CAAC9E,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;IACA,CACEsG,KAAK,CAAC+D,KAAN,CAAY,UAAA5D,IAAI;MAAA,OAAIA,IAAI,CAACpE,OAAL,KAAiBiE,KAAK,CAAC,CAAD,CAAL,CAASjE,OAA9B;KAAhB,CADF,2CAAArC,SAAS,QAEP,WAFO,CAAT,GAAAA,SAAS,OAAT;IAIA,EACGmK,KAAK,YAAY/H,KAAjB,IAA0BkE,KAAK,CAAC,CAAD,CAAL,CAAS+B,aAAT,CAAuB8B,KAAvB,CAA3B,IACGA,KAAK,KAAKhI,GAAV,IAAiBmE,KAAK,CAAC,CAAD,CAAL,CAAS+B,aAAT,CAAuBxF,IAAI,CAACyD,KAAK,CAAC,CAAD,CAAL,CAASjE,OAAV,CAA3B,CAFtB,4CAAArC,SAAS,QAGP,OAHO,CAAT,GAAAA,SAAS,OAAT;IAKA,EACE,OAAOoK,MAAP,KAAkB,WAAlB,IACGA,MAAM,YAAYhI,KAAlB,IAA2BkE,KAAK,CAACA,KAAK,CAAC9E,MAAN,GAAe,CAAhB,CAAL,CAAwB6G,aAAxB,CAAsC+B,MAAtC,CAD9B,IAEGA,MAAM,KAAKjI,GAAX,IAAkBmE,KAAK,CAACA,KAAK,CAAC9E,MAAN,GAAe,CAAhB,CAAL,CAAwB6G,aAAxB,CAAsCxF,IAAI,CAACyD,KAAK,CAAC,CAAD,CAAL,CAASjE,OAAV,CAA1C,CAHvB,4CAAArC,SAAS,QAIP,QAJO,CAAT,GAAAA,SAAS,OAAT;IAOA,IAAM0G,IAAI,GAAY,CAACyD,KAAK,YAAY/H,KAAjB,GAAyB+H,KAAzB,GAAiCtH,IAAI,CAACyD,KAAK,CAAC,CAAD,CAAL,CAASjE,OAAV,CAAtC,CAAtB;;IACA,qDAAwBiE,KAAK,CAACC,OAAN,EAAxB,wCAAyC;MAAA;UAA7BC,CAA6B;UAA1BC,IAA0B;MACvC,IAAM6D,YAAY,GAAG5D,IAAI,CAACF,CAAD,CAAzB;MACA,EAAU8D,YAAY,CAAChI,MAAb,CAAoBmE,IAAI,CAACE,MAAzB,KAAoC2D,YAAY,CAAChI,MAAb,CAAoBmE,IAAI,CAAC6B,MAAzB,CAA9C,4CAAAtI,SAAS,QAAuE,MAAvE,CAAT,GAAAA,SAAS,OAAT;;MACA,IAAMoK,OAAM,GAAGE,YAAY,CAAChI,MAAb,CAAoBmE,IAAI,CAACE,MAAzB,IAAmCF,IAAI,CAAC6B,MAAxC,GAAiD7B,IAAI,CAACE,MAArE;;MACAD,IAAI,CAACjF,IAAL,CAAU2I,OAAV;;;IAGF,KAAK9D,KAAL,GAAaA,KAAb;IACA,KAAKI,IAAL,GAAYA,IAAZ;IACA,KAAK6D,QAAL,GAAgBxE,KAAK,CAACI,SAAN,CAAgB,IAAhB,CAAhB;IACA,KAAKgE,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd,aAAcA,MAAd,cAAcA,MAAd,GAAwB1D,IAAI,CAACA,IAAI,CAAClF,MAAL,GAAc,CAAf,CAA5B;;;EArCJ;IAAA;IAAA,KAwCE;MACE,OAAO,KAAK8E,KAAL,CAAW,CAAX,EAAcjE,OAArB;;;;EAzCJ;AAAA;;ACMA;;;;;;;AAMA,SAASmI,kBAAT,CAA4BD,QAA5B,EAA6C3B,WAA7C,EAA0EM,YAA1E;EACE,IAAMuB,UAAU,GAAGF,QAAQ,CAAC5E,GAAT,CAAa1B,QAAb,CAAsB2E,WAAW,CAACjD,GAAlC,CAAnB;;EAEA,IAAM+E,QAAQ,GAAGD,UAAU,CAACvG,QAAX,CAAoBgF,YAAY,CAACvD,GAAjC,EAAsC1E,MAAtC,CAA6CwJ,UAA7C,CAAjB;EACA,OAAO,IAAIlD,OAAJ,CAAYmD,QAAQ,CAAC9G,SAArB,EAAgC8G,QAAQ,CAAC7G,WAAzC,CAAP;AACD;AASD;;;AACA,SAAgB8G,sBAAsBC,GAAgBC;;EAEpD,CAAUnI,cAAc,CAACkI,CAAC,CAAChC,WAAF,CAActD,QAAf,EAAyBuF,CAAC,CAACjC,WAAF,CAActD,QAAvC,CAAxB,2CAAAtF,SAAS,QAAiE,gBAAjE,CAAT,GAAAA,SAAS,OAAT;EACA,CAAU0C,cAAc,CAACkI,CAAC,CAAC1B,YAAF,CAAe5D,QAAhB,EAA0BuF,CAAC,CAAC3B,YAAF,CAAe5D,QAAzC,CAAxB,2CAAAtF,SAAS,QAAmE,iBAAnE,CAAT,GAAAA,SAAS,OAAT;;EACA,IAAI4K,CAAC,CAAC1B,YAAF,CAAe/E,OAAf,CAAuB0G,CAAC,CAAC3B,YAAzB,CAAJ,EAA4C;IAC1C,IAAI0B,CAAC,CAAChC,WAAF,CAAczE,OAAd,CAAsB0G,CAAC,CAACjC,WAAxB,CAAJ,EAA0C;MACxC,OAAO,CAAP;KAFwC;;;IAK1C,IAAIgC,CAAC,CAAChC,WAAF,CAAc1H,QAAd,CAAuB2J,CAAC,CAACjC,WAAzB,CAAJ,EAA2C;MACzC,OAAO,CAAC,CAAR;KADF,MAEO;MACL,OAAO,CAAP;;GARJ,MAUO;;IAEL,IAAIgC,CAAC,CAAC1B,YAAF,CAAehI,QAAf,CAAwB2J,CAAC,CAAC3B,YAA1B,CAAJ,EAA6C;MAC3C,OAAO,CAAP;KADF,MAEO;MACL,OAAO,CAAC,CAAR;;;AAGL;;AAGD,SAAgB4B,gBAAgBF,GAAUC;EACxC,IAAME,MAAM,GAAGJ,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;;EACA,IAAIE,MAAM,KAAK,CAAf,EAAkB;IAChB,OAAOA,MAAP;;;;EAIF,IAAIH,CAAC,CAACI,WAAF,CAAc9J,QAAd,CAAuB2J,CAAC,CAACG,WAAzB,CAAJ,EAA2C;IACzC,OAAO,CAAC,CAAR;GADF,MAEO,IAAIJ,CAAC,CAACI,WAAF,CAAcjK,WAAd,CAA0B8J,CAAC,CAACG,WAA5B,CAAJ,EAA8C;IACnD,OAAO,CAAP;;;;EAIF,OAAOJ,CAAC,CAACxE,KAAF,CAAQM,IAAR,CAAalF,MAAb,GAAsBqJ,CAAC,CAACzE,KAAF,CAAQM,IAAR,CAAalF,MAA1C;AACD;AASD;;;;;;AAKA,SAASyJ,aAAT,CAAuB7D,cAAvB,EAAuD/E,OAAvD;EACE,IAAI+E,cAAc,YAAYvB,WAA9B,EAA2C,OAAOuB,cAAP;EAC3C,IAAIA,cAAc,CAAC9B,QAAf,KAA4BnD,GAAhC,EAAqC,OAAO,IAAI0D,WAAJ,CAAgBhD,IAAI,CAACR,OAAD,CAApB,EAA+B+E,cAAc,CAACzB,GAA9C,CAAP;EACrC,yCAAA3F,SAAS,QAAQ,UAAR,CAAT,GAAAA,SAAS,OAAT;AACD;;AAED,SAASkL,eAAT,CAAyB5F,QAAzB,EAA6CjD,OAA7C;EACE,IAAIiD,QAAQ,YAAYlD,KAAxB,EAA+B,OAAOkD,QAAP;EAC/B,IAAIA,QAAQ,KAAKnD,GAAjB,EAAsB,OAAOU,IAAI,CAACR,OAAD,CAAX;EACtB,yCAAArC,SAAS,QAAQ,UAAR,CAAT,GAAAA,SAAS,OAAT;AACD;AAED;;;;;;AAIA,IAAamL,KAAb;EAoDE,eAAmB/E,KAAnB,EAAiCb,MAAjC,EAAyD6F,SAAzD,EAA+EvC,iBAA/E;IACE,KAAKwC,WAAL,GAAmBxC,iBAAnB;IACA,IAAMyC,OAAO,GAAkB,IAAIC,KAAJ,CAAUnF,KAAK,CAACM,IAAN,CAAWlF,MAArB,CAA/B;IACA,IAAMgK,SAAS,GAAW,IAAID,KAAJ,CAAUnF,KAAK,CAACE,KAAN,CAAY9E,MAAtB,CAA1B;;IACA,IAAI4J,SAAS,KAAK9N,SAAS,CAACmO,WAA5B,EAAyC;MACvC,CAAU/I,cAAc,CAAC6C,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAAC+D,KAAxB,CAAxB,2CAAAnK,SAAS,QAA+C,OAA/C,CAAT,GAAAA,SAAS,OAAT;MACAsL,OAAO,CAAC,CAAD,CAAP,GAAaL,aAAa,CAAC1F,MAAD,EAASa,KAAK,CAAC/D,OAAf,CAA1B;;MACA,KAAK,IAAImE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAAxC,EAA2CgF,CAAC,EAA5C,EAAgD;QAC9C,IAAMC,IAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,CAAZ,CAAb;;QACA,4BAAiCC,IAAI,CAACkC,eAAL,CAAqB2C,OAAO,CAAC9E,CAAD,CAA5B,EAAiC,KAAK6E,WAAtC,CAAjC;YAAOnC,YAAP;YAAqBwC,QAArB;;QACAJ,OAAO,CAAC9E,CAAC,GAAG,CAAL,CAAP,GAAiB0C,YAAjB;QACAsC,SAAS,CAAChF,CAAD,CAAT,GAAekF,QAAf;;KAPJ,MASO;MACL,CAAUhJ,cAAc,CAAC6C,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAACgE,MAAxB,CAAxB,2CAAApK,SAAS,QAAgD,QAAhD,CAAT,GAAAA,SAAS,OAAT;MACAsL,OAAO,CAACA,OAAO,CAAC9J,MAAR,GAAiB,CAAlB,CAAP,GAA8ByJ,aAAa,CAAC1F,MAAD,EAASa,KAAK,CAAC/D,OAAf,CAA3C;;MACA,KAAK,IAAImE,EAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWlF,MAAX,GAAoB,CAAjC,EAAoCgF,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;QAC9C,IAAMC,KAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,EAAC,GAAG,CAAhB,CAAb;;QACA,2BAAgCC,KAAI,CAAC0C,cAAL,CAAoBmC,OAAO,CAAC9E,EAAD,CAA3B,EAAgC,KAAK6E,WAArC,CAAhC;YAAOzC,WAAP;YAAoB8C,SAApB;;QACAJ,OAAO,CAAC9E,EAAC,GAAG,CAAL,CAAP,GAAiBoC,WAAjB;QACA4C,SAAS,CAAChF,EAAC,GAAG,CAAL,CAAT,GAAmBkF,SAAnB;;;;IAIJ,KAAKtF,KAAL,GAAaA,KAAb;IACA,KAAKgF,SAAL,GAAiBA,SAAjB;IACA,KAAKxC,WAAL,GACEwC,SAAS,KAAK9N,SAAS,CAACmO,WAAxB,GACIlG,MADJ,GAEIa,KAAK,CAAC+D,KAAN,KAAgBhI,GAAhB,GACAkD,cAAc,CAACK,GAAf,CAAmB4F,OAAO,CAAC,CAAD,CAAP,CAAW3F,GAA9B,CADA,GAEA2F,OAAO,CAAC,CAAD,CALb;IAMA,KAAKpC,YAAL,GACEkC,SAAS,KAAK9N,SAAS,CAACqO,YAAxB,GACIpG,MADJ,GAEIa,KAAK,CAACgE,MAAN,KAAiBjI,GAAjB,GACAkD,cAAc,CAACK,GAAf,CAAmB4F,OAAO,CAACA,OAAO,CAAC9J,MAAR,GAAiB,CAAlB,CAAP,CAA4BmE,GAA/C,CADA,GAEA2F,OAAO,CAACA,OAAO,CAAC9J,MAAR,GAAiB,CAAlB,CALb;IAMA,KAAKoK,cAAL,GAAsB,IAAI7F,KAAJ,CACpB,KAAK6C,WAAL,CAAiBtD,QADG,EAEpB,KAAK4D,YAAL,CAAkB5D,QAFE,EAGpB,KAAKsD,WAAL,CAAiBjD,GAHG,EAIpB,KAAKuD,YAAL,CAAkBvD,GAJE,CAAtB;IAMA,KAAKkG,YAAL,GAAoB9F,KAAK,CAACI,SAAN,CAAgB,IAAI+D,KAAJ,CAAUsB,SAAV,EAAqBpF,KAAK,CAAC+D,KAA3B,CAAhB,CAApB;IACA,KAAKa,WAAL,GAAmBR,kBAAkB,CAACpE,KAAK,CAACmE,QAAP,EAAiB,KAAK3B,WAAtB,EAAmC,KAAKM,YAAxC,CAArC;;;;;;;;;EAjGJ,MAuCgB4C,OAvChB,GAuCS,iBAAe1F,KAAf,EAA6B2F,QAA7B;IACL,OAAO,IAAIZ,KAAJ,CAAU/E,KAAV,EAAiB2F,QAAjB,EAA2BzO,SAAS,CAACmO,WAArC,CAAP;;;;;;;;;EAxCJ,MAgDgBO,QAhDhB,GAgDS,kBAAgB5F,KAAhB,EAA8B6F,SAA9B;IACL,OAAO,IAAId,KAAJ,CAAU/E,KAAV,EAAiB6F,SAAjB,EAA4B3O,SAAS,CAACqO,YAAtC,CAAP;;;;;;;;EAjDJ;;EAAA,OAwGSO,gBAxGT,GAwGS,0BAAiBC,iBAAjB;IACL,CAAU,CAACA,iBAAiB,CAACjL,QAAlB,CAA2BpD,IAA3B,CAAX,2CAAAkC,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAI,KAAKoL,SAAL,KAAmB9N,SAAS,CAACqO,YAAjC,EAA+C;MAC7C,OAAO,KAAKzC,YAAZ;KADF,MAEO;MACL,IAAMkD,yBAAyB,GAAG,IAAIzI,QAAJ,CAAa5F,GAAb,EAC/BiD,GAD+B,CAC3BmL,iBAD2B,EAE/BrI,MAF+B,GAG/BG,QAH+B,CAGtB,KAAKiF,YAAL,CAAkBvD,GAHI,EAGCd,QAHnC;MAIA,OAAO,KAAKqE,YAAL,YAA6BrD,WAA7B,GACH,IAAIA,WAAJ,CAAgB,KAAKqD,YAAL,CAAkBpD,KAAlC,EAAyCsG,yBAAzC,CADG,GAEH/G,cAAc,CAACK,GAAf,CAAmB0G,yBAAnB,CAFJ;;;;;;;;;EAjHN,OA2HSC,eA3HT,GA2HS,yBAAgBF,iBAAhB;IACL,CAAU,CAACA,iBAAiB,CAACjL,QAAlB,CAA2BpD,IAA3B,CAAX,2CAAAkC,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAI,KAAKoL,SAAL,KAAmB9N,SAAS,CAACmO,WAAjC,EAA8C;MAC5C,OAAO,KAAK7C,WAAZ;KADF,MAEO;MACL,IAAM0D,wBAAwB,GAAG,IAAI3I,QAAJ,CAAa5F,GAAb,EAAkBiD,GAAlB,CAAsBmL,iBAAtB,EAAyClI,QAAzC,CAAkD,KAAK2E,WAAL,CAAiBjD,GAAnE,EAAwEd,QAAzG;MACA,OAAO,KAAK+D,WAAL,YAA4B/C,WAA5B,GACH,IAAIA,WAAJ,CAAgB,KAAK+C,WAAL,CAAiB9C,KAAjC,EAAwCwG,wBAAxC,CADG,GAEHjH,cAAc,CAACK,GAAf,CAAmB4G,wBAAnB,CAFJ;;;;;;;;;;;;;;;;;;;EAjIN,MAqJgBC,gBArJhB,GAqJS,0BACLjG,KADK,EAELkG,gBAFK,EAGLC,WAHK,SAKL5D,iBALK;EAOL6D,YAPK,EAQLC,gBARK,EASLC,UATK;kCAIkD;kCAArDC;QAAAA,gDAAgB;4BAAGC;QAAAA,oCAAU;;QAG/BJ;MAAAA,eAAuB;;;QACvBC;MAAAA,mBAAmCH;;;QACnCI;MAAAA,aAAsB;;;IAEtB,EAAUtG,KAAK,CAAC9E,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;IACA,EAAU8M,OAAO,GAAG,CAApB,4CAAA9M,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;IACA,EAAU2M,gBAAgB,KAAKH,gBAArB,IAAyCE,YAAY,CAAClL,MAAb,GAAsB,CAAzE,4CAAAxB,SAAS,QAAmE,mBAAnE,CAAT,GAAAA,SAAS,OAAT;IACA,IAAMqC,OAAO,GACXmK,gBAAgB,YAAY3G,WAA5B,GACI2G,gBAAgB,CAAC1G,KAAjB,CAAuBzD,OAD3B,GAEIoK,WAAW,YAAYrK,KAAvB,GACAqK,WAAW,CAACpK,OADZ,GAEA4F,SALN;IAMA,EAAU5F,OAAO,KAAK4F,SAAtB,4CAAAjI,SAAS,QAAwB,UAAxB,CAAT,GAAAA,SAAS,OAAT;IAEA,IAAM+L,QAAQ,GAAGd,aAAa,CAACuB,gBAAD,EAAmBnK,OAAnB,CAA9B;IACA,IAAM0K,QAAQ,GAAG7B,eAAe,CAACuB,WAAD,EAAcpK,OAAd,CAAhC;;IACA,KAAK,IAAImE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAC9E,MAA1B,EAAkCgF,CAAC,EAAnC,EAAuC;MACrC,IAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;MAGrC,IAAI,CAACC,IAAI,CAACE,MAAL,CAAYrE,MAAZ,CAAmByJ,QAAQ,CAACjG,KAA5B,CAAD,IAAuC,CAACW,IAAI,CAAC6B,MAAL,CAAYhG,MAAZ,CAAmByJ,QAAQ,CAACjG,KAA5B,CAA5C,EAAgF;MAChF,IAAIW,IAAI,CAACG,QAAL,CAAczC,OAAd,CAAsBrG,IAAtB,KAA+B2I,IAAI,CAACI,QAAL,CAAc1C,OAAd,CAAsBrG,IAAtB,CAAnC,EAAgE;MAEhE,IAAImO,SAAsB,SAA1B;;MACA,IAAI;QACF;;QADE,6BACaxF,IAAI,CAACkC,eAAL,CAAqBoD,QAArB,EAA+BlD,iBAA/B,CADb;;QACAoD,SADA;OAAJ,CAEE,OAAO1L,KAAP,EAAc;;QAEd,IAAIA,KAAK,CAACyM,8BAAV,EAA0C;UACxC;;;QAEF,MAAMzM,KAAN;OAdmC;;;MAiBrC,IAAI0L,SAAS,CAACnG,KAAV,CAAgBxD,MAAhB,CAAuByK,QAAvB,CAAJ,EAAsC;QACpC3L,YAAY,CACVwL,UADU,EAEV,IAAIzB,KAAJ,CACE,IAAIjB,KAAJ,WAAcwC,YAAd,GAA4BjG,IAA5B,IAAmCkG,gBAAgB,CAACrH,QAApD,EAA8DmH,WAA9D,CADF,EAEEE,gBAFF,EAGErP,SAAS,CAACmO,WAHZ,EAIE5C,iBAJF,CAFU,EAQVgE,aARU,EASV/B,eATU,CAAZ;OADF,MAYO,IAAIgC,OAAO,GAAG,CAAV,IAAexG,KAAK,CAAC9E,MAAN,GAAe,CAAlC,EAAqC;QAC1C,IAAMyL,sBAAsB,GAAG3G,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkB0G,MAAlB,CAAyB5G,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAC9E,MAAzB,CAAzB,CAA/B,CAD0C;;QAI1C2J,KAAK,CAACoB,gBAAN,CACEU,sBADF,EAEEhB,SAFF,EAGEQ,WAHF,EAIE;UACEI,aAAa,EAAbA,aADF;UAEEC,OAAO,EAAEA,OAAO,GAAG;SANvB,EAQEjE,iBARF,YASM6D,YATN,GASoBjG,IATpB,IAUEkG,gBAVF,EAWEC,UAXF;;;;IAgBJ,OAAOA,UAAP;;;;;;;;;;;;;;;;;;;EA9NJ,MAgPgBO,iBAhPhB,GAgPS,2BACL7G,KADK,EAEL8G,UAFK,EAGLC,iBAHK,UAKLxE,iBALK;EAOL6D,YAPK,EAQLY,iBARK,EASLV,UATK;oCAIkD;oCAArDC;QAAAA,iDAAgB;8BAAGC;QAAAA,qCAAU;;QAG/BJ;MAAAA,eAAuB;;;QACvBY;MAAAA,oBAAoCD;;;QACpCT;MAAAA,aAAsB;;;IAEtB,EAAUtG,KAAK,CAAC9E,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;IACA,EAAU8M,OAAO,GAAG,CAApB,4CAAA9M,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;IACA,EAAUsN,iBAAiB,KAAKD,iBAAtB,IAA2CX,YAAY,CAAClL,MAAb,GAAsB,CAA3E,4CAAAxB,SAAS,QAAqE,mBAArE,CAAT,GAAAA,SAAS,OAAT;IACA,IAAMqC,OAAO,GACXgL,iBAAiB,YAAYxH,WAA7B,GACIwH,iBAAiB,CAACvH,KAAlB,CAAwBzD,OAD5B,GAEI+K,UAAU,YAAYhL,KAAtB,GACAgL,UAAU,CAAC/K,OADX,GAEA4F,SALN;IAMA,EAAU5F,OAAO,KAAK4F,SAAtB,4CAAAjI,SAAS,QAAwB,UAAxB,CAAT,GAAAA,SAAS,OAAT;IAEA,IAAMiM,SAAS,GAAGhB,aAAa,CAACoC,iBAAD,EAAoBhL,OAApB,CAA/B;IACA,IAAMkL,OAAO,GAAGrC,eAAe,CAACkC,UAAD,EAAa/K,OAAb,CAA/B;;IACA,KAAK,IAAImE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAC9E,MAA1B,EAAkCgF,CAAC,EAAnC,EAAuC;MACrC,IAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;MAGrC,IAAI,CAACC,IAAI,CAACE,MAAL,CAAYrE,MAAZ,CAAmB2J,SAAS,CAACnG,KAA7B,CAAD,IAAwC,CAACW,IAAI,CAAC6B,MAAL,CAAYhG,MAAZ,CAAmB2J,SAAS,CAACnG,KAA7B,CAA7C,EAAkF;MAClF,IAAIW,IAAI,CAACG,QAAL,CAAczC,OAAd,CAAsBrG,IAAtB,KAA+B2I,IAAI,CAACI,QAAL,CAAc1C,OAAd,CAAsBrG,IAAtB,CAAnC,EAAgE;MAEhE,IAAIiO,QAAqB,SAAzB;;MACA,IAAI;QACF;;QADE,4BACYtF,IAAI,CAAC0C,cAAL,CAAoB8C,SAApB,EAA+BpD,iBAA/B,CADZ;;QACAkD,QADA;OAAJ,CAEE,OAAOxL,KAAP,EAAc;;QAEd,IAAIA,KAAK,CAACiN,2BAAV,EAAuC;UACrC;;;QAEF,MAAMjN,KAAN;OAdmC;;;MAiBrC,IAAIwL,QAAQ,CAACjG,KAAT,CAAexD,MAAf,CAAsBiL,OAAtB,CAAJ,EAAoC;QAClCnM,YAAY,CACVwL,UADU,EAEV,IAAIzB,KAAJ,CACE,IAAIjB,KAAJ,EAAWzD,IAAX,SAAoBiG,YAApB,GAAmCU,UAAnC,EAA+CE,iBAAiB,CAAChI,QAAjE,CADF,EAEEgI,iBAFF,EAGEhQ,SAAS,CAACqO,YAHZ,EAIE9C,iBAJF,CAFU,EAQVgE,aARU,EASV/B,eATU,CAAZ;OADF,MAYO,IAAIgC,OAAO,GAAG,CAAV,IAAexG,KAAK,CAAC9E,MAAN,GAAe,CAAlC,EAAqC;QAC1C,IAAMyL,sBAAsB,GAAG3G,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkB0G,MAAlB,CAAyB5G,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAC9E,MAAzB,CAAzB,CAA/B,CAD0C;;QAI1C2J,KAAK,CAACgC,iBAAN,CACEF,sBADF,EAEEG,UAFF,EAGErB,QAHF,EAIE;UACEc,aAAa,EAAbA,aADF;UAEEC,OAAO,EAAEA,OAAO,GAAG;SANvB,EAQEjE,iBARF,GASGpC,IATH,SASYiG,YATZ,GAUEY,iBAVF,EAWEV,UAXF;;;;IAgBJ,OAAOA,UAAP;GAzTJ;;EAAA;AAAA;;ACjDA,SAASa,KAAT,CAAerG,cAAf;EACE,cAAYA,cAAc,CAACzB,GAAf,CAAmBjF,QAAnB,CAA4B,EAA5B,CAAZ;AACD;;AAED,IAAMgN,QAAQ,GAAG,KAAjB;AAEA;;;;AAGA,IAAsBC,MAAtB;;;;EAIE;;;;;;;;EAJF,OAUgBC,kBAVhB,GAUS,4BAA0BC,KAA1B,EAAwCC,OAAxC;IACL,IAAMC,OAAO,GAAGF,KAAK,CAACjF,WAAN,CAAkBtD,QAAlB,KAA+BnD,GAA/C;IACA,IAAM6L,QAAQ,GAAGH,KAAK,CAAC3E,YAAN,CAAmB5D,QAAnB,KAAgCnD,GAAjD;;IAEA,CAAU,EAAE4L,OAAO,IAAIC,QAAb,CAAV,2CAAAhO,SAAS,QAAyB,YAAzB,CAAT,GAAAA,SAAS,OAAT;IACA,EAAU,EAAE,SAAS8N,OAAX,KAAuBA,OAAO,CAACG,GAAR,GAAc,CAA/C,4CAAAjO,SAAS,QAAyC,KAAzC,CAAT,GAAAA,SAAS,OAAT;IAEA,IAAMkO,EAAE,GAAWhO,uBAAuB,CAAC4N,OAAO,CAACK,SAAT,CAA1C;IACA,IAAMpC,QAAQ,GAAW0B,KAAK,CAACI,KAAK,CAACxB,eAAN,CAAsByB,OAAO,CAACM,eAA9B,CAAD,CAA9B;IACA,IAAMnC,SAAS,GAAWwB,KAAK,CAACI,KAAK,CAAC3B,gBAAN,CAAuB4B,OAAO,CAACM,eAA/B,CAAD,CAA/B;IACA,IAAM1H,IAAI,GAAamH,KAAK,CAACzH,KAAN,CAAYM,IAAZ,CAAiB2H,GAAjB,CAAqB,UAAAvI,KAAK;MAAA,OAAIA,KAAK,CAAC3F,OAAV;KAA1B,CAAvB;IACA,IAAMmO,QAAQ,GACZ,SAASR,OAAT,UACS,CAACS,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,IAA0CZ,OAAO,CAACG,GAAnD,EAAwDvN,QAAxD,CAAiE,EAAjE,CADT,UAESoN,OAAO,CAACQ,QAAR,CAAiB5N,QAAjB,CAA0B,EAA1B,CAHX;IAKA,IAAMiO,gBAAgB,GAAGC,OAAO,CAACd,OAAO,CAACe,aAAT,CAAhC;IAEA,IAAIC,UAAJ;IACA,IAAIC,IAAJ;IACA,IAAIlP,KAAJ;;IACA,QAAQgO,KAAK,CAACzC,SAAd;MACE,KAAK9N,SAAS,CAACmO,WAAf;QACE,IAAIsC,OAAJ,EAAa;UACXe,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADW;;UAGXI,IAAI,GAAG,CAAC9C,SAAD,EAAYvF,IAAZ,EAAkBwH,EAAlB,EAAsBI,QAAtB,CAAP;UACAzO,KAAK,GAAGkM,QAAR;SAJF,MAKO,IAAIiC,QAAJ,EAAc;UACnBc,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADmB;;UAGnBI,IAAI,GAAG,CAAChD,QAAD,EAAWE,SAAX,EAAsBvF,IAAtB,EAA4BwH,EAA5B,EAAgCI,QAAhC,CAAP;UACAzO,KAAK,GAAG6N,QAAR;SAJK,MAKA;UACLoB,UAAU,GAAGH,gBAAgB,GACzB,uDADyB,GAEzB,0BAFJ,CADK;;UAKLI,IAAI,GAAG,CAAChD,QAAD,EAAWE,SAAX,EAAsBvF,IAAtB,EAA4BwH,EAA5B,EAAgCI,QAAhC,CAAP;UACAzO,KAAK,GAAG6N,QAAR;;;QAEF;;MACF,KAAKpQ,SAAS,CAACqO,YAAf;QACE,CAAU,CAACgD,gBAAX,2CAAA3O,SAAS,QAAoB,eAApB,CAAT,GAAAA,SAAS,OAAT;;QACA,IAAI+N,OAAJ,EAAa;UACXe,UAAU,GAAG,uBAAb,CADW;;UAGXC,IAAI,GAAG,CAAC9C,SAAD,EAAYvF,IAAZ,EAAkBwH,EAAlB,EAAsBI,QAAtB,CAAP;UACAzO,KAAK,GAAGkM,QAAR;SAJF,MAKO,IAAIiC,QAAJ,EAAc;UACnBc,UAAU,GAAG,uBAAb,CADmB;;UAGnBC,IAAI,GAAG,CAAC9C,SAAD,EAAYF,QAAZ,EAAsBrF,IAAtB,EAA4BwH,EAA5B,EAAgCI,QAAhC,CAAP;UACAzO,KAAK,GAAG6N,QAAR;SAJK,MAKA;UACLoB,UAAU,GAAG,0BAAb,CADK;;UAGLC,IAAI,GAAG,CAAC9C,SAAD,EAAYF,QAAZ,EAAsBrF,IAAtB,EAA4BwH,EAA5B,EAAgCI,QAAhC,CAAP;UACAzO,KAAK,GAAG6N,QAAR;;;QAEF;;;IAEJ,OAAO;MACLoB,UAAU,EAAVA,UADK;MAELC,IAAI,EAAJA,IAFK;MAGLlP,KAAK,EAALA;KAHF;GAxtDA,IAAImP,oBAAoB,sDACrB3R,OAAO,CAACyF,OADa,IACH;;AAAA,CADG,wBAAxB;AAOA;;;;AAGA,IAAsBmM,OAAtB;;;;EAIE;;;;;;;;;;;EAJF,QAcsBC,cAdtB,2BAeI7M,OAfJ,EAgBIlC,OAhBJ;EAkBIgP,QAlBJ,EAmBIjN,MAnBJ,EAoBI5C,IApBJ;IAAA;;;mCAsBU8P;QAaN,OAAO,IAAIhN,KAAJ,CAAUC,OAAV,EAAmBlC,OAAnB,EAA4BiP,cAA5B,EAA4ClN,MAA5C,EAAoD5C,IAApD,CAAP;;;UAjBA6P,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAACjN,OAAD,CAAX;;mBAK3B,kCAAO2M,oBAAP,qFAAO,uBAAuB3M,OAAvB,CAAP,2DAAO,uBAAkClC,OAAlC,CAAP,MAAsD;;6CAClD6O,oBAAoB,CAAC3M,OAAD,CAApB,CAA8BlC,OAA9B,qBACM,IAAIoP,QAAJ,CAAapP,OAAb,EAAsBqP,KAAtB,EAA6BL,QAA7B,EAAuClN,QAAvC,GAAkDwN,IAAlD,CAAuD,UAACxN,QAAD;;;QAC3D+M,oBAAoB,gBACfA,oBADe,6BAEjB3M,OAFiB,2CAGb2M,oBAHa,2DAGb,uBAAuB3M,OAAvB,CAHa,6BAIflC,OAJe,IAIL8B,QAJK,0BAApB;QAOA,OAAOA,QAAP;OARI;KAzBhB;MAAA;;;;;;;;;;;EAAA,QA4CsByN,aA5CtB,0BA6CI5H,MA7CJ,EA8CIC,MA9CJ,EA+CIoH,QA/CJ;IAAA;UA+CIA,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAACxH,MAAM,CAACzF,OAAR,CAAX;MAE7B,EAAUyF,MAAM,CAACzF,OAAP,KAAmB0F,MAAM,CAAC1F,OAApC,4CAAArC,SAAS,QAAoC,UAApC,CAAT,GAAAA,SAAS,OAAT;MACA,IAAMG,OAAO,GAAGsH,IAAI,CAACpH,UAAL,CAAgByH,MAAhB,EAAwBC,MAAxB,CAAhB;6BACqC,IAAIwH,QAAJ,CAAapP,OAAb,EAAsBwP,eAAe,CAACC,GAAtC,EAA2CT,QAA3C,EAAqDU,WAArD;YAA9BC;YAAWC;QAClB,IAAMC,QAAQ,GAAGlI,MAAM,CAACtF,WAAP,CAAmBuF,MAAnB,IAA6B,CAAC+H,SAAD,EAAYC,SAAZ,CAA7B,GAAsD,CAACA,SAAD,EAAYD,SAAZ,CAAvE;QACA,OAAO,IAAIrI,IAAJ,CAAS,IAAI5B,WAAJ,CAAgBiC,MAAhB,EAAwBkI,QAAQ,CAAC,CAAD,CAAhC,CAAT,EAA+C,IAAInK,WAAJ,CAAgBkC,MAAhB,EAAwBiI,QAAQ,CAAC,CAAD,CAAhC,CAA/C,CAAP;;KArDJ;MAAA;;;;EAAA;AAAA;;;;"}